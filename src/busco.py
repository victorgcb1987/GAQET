"""
busco.py
========
Wrapper helpers for two external tools:

* **GFFread** - extracts protein FASTA from a genome + annotation GFF/GTF.
* **BUSCO**   - computes completeness metrics on those proteins.

Each runner returns a dictionary with the executed command, an informational message,
the main output path, and a ``returncode`` (99 means “already done”).
"""


import subprocess
from pathlib import Path
from typing import Any, Dict

# ---------------------------------------------------------------------------
# 1.  Extract protein sequences with GFFread
# ---------------------------------------------------------------------------
def run_gffread(arguments: Dict[str, Any]) -> Dict[str, Any]:
    """Run *gffread* (or skip if output already exists)."""

    # Output directory and file
    outdir = arguments["output"] / "input_sequences"
    if not outdir.exists():
        outdir.mkdir(parents=True, exist_ok=True)
    outfile = outdir / "{}.proteins.fasta".format(Path(arguments["ref_assembly"]).stem)

    # GFFread command
    cmd = "gffread -y {} -g {} {}".format(outfile, 
                                            arguments["ref_assembly"],
                                            arguments["annotation"])

    # BUSCO will need this file
    arguments["input"] = outfile

    # Check if GFFread is already done
    if outfile.exists():
        return {"command": cmd, 
                "msg": "Extract sequences already done",
                "out_fpath": outfile,
                "returncode": 99}
    else:
        #Run GFFread 
        run_ = subprocess.run(cmd, shell=True, stderr=subprocess.PIPE)

        if run_.returncode == 0:
            msg = "GFFread run successfully"
        else:
            msg = "GFFread Failed: \n {}".format(run_.stderr)

        return {"command": cmd,
                "msg": msg,
                "out_fpath": outfile, 
                "returncode": run_.returncode}

# ---------------------------------------------------------------------------
# 2.  Run BUSCO completeness
# ---------------------------------------------------------------------------
def run_busco(arguments: Dict[str, Any]) -> Dict[str, Any]:
    """Run *BUSCO* on the protein FASTA generated by :func:`run_gffread`."""

    #Create output directory
    outdir = arguments["output"] / "BUSCOCompleteness"

    # BUSCO command
    cmd = "busco -i {} -c {} -o {} --out_path {} --mode prot -l {}".format(arguments["input"],
                                                                arguments["threads"],
                                                                arguments["input"].stem,
                                                                outdir,
                                                                arguments["lineage"])

    if outdir.exists():
        return {"command": cmd,
                "msg": "BUSCO already done",
                "out_fpath": outdir,
                "returncode": 99}
    else: 
        #Run BUSCO
        run_ = subprocess.run(cmd, shell=True, stderr=subprocess.PIPE)

        if run_.returncode == 0:
            msg = "BUSCO run successfully"
        else:
            msg = "BUSCO Failed: \n {}".format(run_.stderr)

        return {"command": cmd, 
                "msg": msg,
                "out_fpath": outdir, 
                "returncode": run_.returncode}

# ---------------------------------------------------------------------------
# 3.  Extract the single line that contains the BUSCO percentage
# ---------------------------------------------------------------------------
def get_busco_results(busco_results: Dict[str, Any], lineage: str = "") -> str:
    """Return the summary line (with `%`) from BUSCO's *short_summary* file."""
    busco_fpath = busco_results["out_fpath"] / "short_summary.specific.{}.BUSCOCompleteness.txt".format(lineage)
    with open(busco_fpath, encoding="utf-8") as fh:
        for line in fh:
            if "%" in line:
                return line.strip()